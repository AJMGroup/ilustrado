# Cell file generated by matador (Matthew Evans 2016)

%BLOCK LATTICE_CART
1 0 0
0 1 0
0 0 1
%ENDBLOCK LATTICE_CART

%BLOCK POSITIONS_FRAC
%ENDBLOCK POSITIONS_FRAC

SYMMETRY_TOL: 0.001
SYMMETRY_GENERATE
SNAP_TO_SYMMETRY

%BLOCK EXTERNAL_PRESSURE
0.0 0.0 0.0
0.0 0.0
0.0
%ENDBLOCK EXTERNAL_PRESSURE

kpoints_mp_spacing : 0.07

%BLOCK SPECIES_POT
P P_00PBE.usp
K K_00PBE.usp
%ENDBLOCK SPECIES_POT

#! `from itertools import product`
#! `A = range(1,8)`
#! define Nspecies int 2
#! `import fractions`
#! `possibilities = list(set(list(map(lambda x: (tuple(y/reduce(fractions.gcd, x) for y in x)), product(A, repeat=userVars['Nspecies'])))))`
#! `userVars['possibilities'] = possibilities`
#! `userVars['targnatoms'] = 20`
#! `userVars['numpossibilities'] = len(userVars['possibilities'])`
#! define ratiochoice int 1 to numpossibilities
#! `userVars['NK'] = userVars['possibilities'][userVars['ratiochoice']][0]`
#! `userVars['NP'] = userVars['possibilities'][userVars['ratiochoice']][1]`
#! `userVars['N'] = userVars['NP'] + userVars['NK']`
#! `userVars['maxnumfu'] = max(userVars['targnatoms']/userVars['N'], 1)`
#! define numfu int 1 to maxnumfu
#! `userVars['NK'] = userVars['numfu'] * userVars['NK']`
#! `userVars['NP'] = userVars['numfu'] * userVars['NP']`
#! `userVars['N'] = userVars['NP'] + userVars['NK']`
#! `userVars['totnum'] = userVars['NP'] + userVars['NK']`

#! define s1 space group operators=2 to 48

#! define dKK minimum separation K-K 2.0
#! define dPP minimum separation P-P 1.0
#! define dKP minimum separation K-P 2.0

#! define minvol float 30*NK+15*NP
#! define maxvol float 45*NK+25*NP

#! `del userVars['possibilities']`
#! `print userVars`

#! define cv volume constraint minvol to maxvol
#! randomise basis vectors subject to cv, s1

#! insert NP P atoms into cell
#! insert NK K atoms into cell

#! randomise all atoms in cell into cell subject to dKK, dPP, dKP, s1

#! optimise all atoms in cell using KP.param
#! save as optimised
